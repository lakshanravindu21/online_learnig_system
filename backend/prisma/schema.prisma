generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite" 
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String? // optional for Google login
  role         String  // "student" | "instructor" | "admin"
  contact      String? 
  status       String? @default("Active") 
  rating       Float?  
  profileImage String?   // ✅ New field for instructor profile image

  // Relations
  courses     Course[]         @relation("CourseInstructor")
  enrollments Enrollment[]
  approvals   CourseApproval[] @relation("UserCourseApprovals")
  payments    Payment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Course {
  id            Int              @id @default(autoincrement())
  courseId      String?          @unique
  title         String
  description   String
  price         Float
  categoryId    Int?
  category      Category?        @relation(fields: [categoryId], references: [id])
  instructorId  Int
  instructor    User             @relation("CourseInstructor", fields: [instructorId], references: [id])
  thumbnailUrl  String?
  contentUrl    String?
  enrolledCount Int              @default(0) 
  status        CourseStatus     @default(ACTIVE)

  // ✅ NEW FIELDS
  duration      String?          // Example: "4hr 35min"
  lectures      Int?             // Example: 30

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  enrollments   Enrollment[]
  approvals     CourseApproval[]
  payments      Payment[]
  assignments   Assignment[]
  quizzes       Quiz[]
  difficulty    Difficulty?
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseApproval {
  id            Int            @id @default(autoincrement())
  courseId      Int
  course        Course         @relation(fields: [courseId], references: [id])
  requestedById Int
  requestedBy   User           @relation("UserCourseApprovals", fields: [requestedById], references: [id])
  status        ApprovalStatus @default(PENDING)
  notes         String?
  createdAt     DateTime       @default(now())
  reviewedAt    DateTime?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  courses   Course[]
}

model Payment {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  courseId    Int
  course      Course        @relation(fields: [courseId], references: [id])
  amount      Float
  currency    String        @default("USD")
  provider    String?
  providerRef String?
  status      PaymentStatus @default(COMPLETED)
  createdAt   DateTime      @default(now())
}

model Assignment {
  id        Int       @id @default(autoincrement())
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id])
  title     String
  content   String
  dueDate   DateTime?
  createdAt DateTime  @default(now())
}

model Quiz {
  id        Int      @id @default(autoincrement())
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  title     String
  items     Int      @default(0)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id          Int      @id @default(autoincrement())
  fullName    String
  phoneNumber String
  email       String
  message     String
  createdAt   DateTime @default(now())
}

// === Enums ===
enum CourseStatus {
  ACTIVE
  PENDING
  DRAFT
  ARCHIVED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
